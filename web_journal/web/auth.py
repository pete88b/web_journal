# AUTOGENERATED! DO NOT EDIT! File to edit: 50b_web_auth.ipynb (unless otherwise specified).

__all__ = ['login_required', 'load_logged_in_user', 'bp', 'login', 'logout']

# Cell
import functools

from flask import Blueprint
from flask import flash
from flask import g, current_app
from flask import redirect
from flask import render_template
from flask import request
from flask import session
from flask import url_for
from werkzeug.security import check_password_hash
from werkzeug.security import generate_password_hash

# Cell
bp = Blueprint("auth", __name__, url_prefix="/auth")

def login_required(view):
    """View decorator that redirects anonymous users to the login page."""
    @functools.wraps(view)
    def wrapped_view(**kwargs):
        if g.user is None:
            return redirect(url_for("auth.login"))
        return view(**kwargs)
    return wrapped_view

@bp.before_app_request
def load_logged_in_user():
    """If a user id is stored in the session, load the user object from
    the database into ``g.user``."""
    user_id = session.get("user_id")

    if user_id is None:
        g.user = None
    else:
        g.user = g.service.read_user_by_id(user_id)

# Cell
@bp.route("/login", methods=("GET", "POST"))
def login():
    """Log in a registered user by adding the user id to the session."""
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        error = None
        user = g.service.read_user_by_username(username)

        if not username: error = "Username is required."
        elif not password: error = "Password is required."
        elif 'login' in request.form:
            if user is None:
                error = "Incorrect username."
            elif not check_password_hash(user["password"], password):
                error = "Incorrect password."
        elif 'register' in request.form:
            if 'USERNAME_SUFFIX' in current_app.config:
                if not username.endswith(current_app.config['USERNAME_SUFFIX']):
                    error = f"Sorry, registration is restricted."
            if user:
                error = f"User {username} is already registered."
        else:
            error = "Unknown action: we only know about login and register"

        if error is None:
            if 'register' in request.form:
                # the name is available, store it in the database and read the new user row
                g.service.create_user(username, generate_password_hash(password))
                user=g.service.read_user_by_username(username)
            # store the user id in a new session and return to the index
            session.clear()
            session["user_id"] = user["id"]
            return redirect(url_for("index"))

        flash(error)

    return render_template("auth/login.html")

# Cell
@bp.route("/logout")
def logout():
    """Clear the current session, including the stored user id."""
    session.clear()
    return redirect(url_for("index"))